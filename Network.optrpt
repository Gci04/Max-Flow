Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: Network::changeEdge(Network *, Edge)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Network::changeEdge(Network *, Edge)) [3] Network.cpp(52,40)
  -> INLINE: (55,38) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const std::__1::vector<Edge, std::__1::allocator<Edge>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (55,38) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
  -> INLINE: (56,34) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (56,34) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (57,15) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> (59,35) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
  -> INLINE: (59,35) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const std::__1::vector<Edge, std::__1::allocator<Edge>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (60,33) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (60,33) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (61,14) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (63,1) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (63,1) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at Network.cpp(56,34)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ Network.cpp(57,19) ]
LOOP END

LOOP BEGIN at Network.cpp(60,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ Network.cpp(61,18) ]
LOOP END

    Report from: Code generation optimizations [cg]

Network.cpp(58,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
Network.cpp(62,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1643,17):remark #34026: call to _memcpy implemented as a call to optimized library version
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1643,17):remark #34026: call to _memcpy implemented as a call to optimized library version
Network.cpp(52,40):remark #34051: REGISTER ALLOCATION : [__ZN7Network10changeEdgeE4Edge] Network.cpp:52

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8 r13-r15]
        
    Routine temporaries
        Total         :     208
            Global    :      45
            Local     :     163
        Regenerable   :      32
        Spilled       :       5
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :      12 [1.61e+01 ~ 5.4%]
            Writes    :      20 [7.36e+00 ~ 2.5%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector(450,28):remark #34051: REGISTER ALLOCATION : [__ZNSt3__16vectorI4EdgeNS_9allocatorIS1_EEED1Ev] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector:450

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r10]
        
    Routine temporaries
        Total         :      24
            Global    :       9
            Local     :      15
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::__vector_base<Edge, std::__1::allocator<Edge>>::~__vector_base(std::__1::__vector_base<Edge, std::__1::allocator<Edge>> *)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector(441,1):remark #34051: REGISTER ALLOCATION : [__ZNSt3__113__vector_baseI4EdgeNS_9allocatorIS1_EEED1Ev] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector:441

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r10]
        
    Routine temporaries
        Total         :      24
            Global    :       9
            Local     :      15
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Network::AddEdge(Network *, const Edge &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Network::AddEdge(Network *, const Edge &)) [13] Network.cpp(3,38)


    Report from: Code generation optimizations [cg]

Network.cpp(3,38):remark #34051: REGISTER ALLOCATION : [__ZN7Network7AddEdgeERK4Edge] Network.cpp:3

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rsi rdi r15]
        
    Routine temporaries
        Total         :      19
            Global    :      11
            Local     :       8
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Network::AddVertex(Network *, Vertex *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Network::AddVertex(Network *, Vertex *)) [14] Network.cpp(9,36)
  -> INLINE: (10,11) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::push_back(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::const_reference)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1676,17):remark #34026: call to _memcpy implemented as a call to optimized library version
Network.cpp(9,36):remark #34051: REGISTER ALLOCATION : [__ZN7Network9AddVertexEP6Vertex] Network.cpp:9

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8 r12-r14]
        
    Routine temporaries
        Total         :      80
            Global    :      34
            Local     :      46
        Regenerable   :      11
        Spilled       :       5
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       5 [4.13e-01 ~ 0.9%]
            Writes    :      14 [9.63e-01 ~ 2.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::__split_buffer<std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::value_type, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::allocator_type &>::~__split_buffer(std::__1::__split_buffer<std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::value_type, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::allocator_type &> *)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer(340,1):remark #34051: REGISTER ALLOCATION : [__ZNSt3__114__split_bufferIP6VertexRNS_9allocatorIS2_EEED1Ev] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer:340

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rcx rdi]
        
    Routine temporaries
        Total         :      25
            Global    :      10
            Local     :      15
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Network::setSink(Network *, Vertex *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Network::setSink(Network *, Vertex *)) [23] Network.cpp(14,33)


    Report from: Code generation optimizations [cg]

Network.cpp(14,33):remark #34051: REGISTER ALLOCATION : [__ZN7Network7setSinkEP6Vertex] Network.cpp:14

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rsi rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Network::getSink(const Network *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Network::getSink(const Network *) const) [24] Network.cpp(17,34)


    Report from: Code generation optimizations [cg]

Network.cpp(17,34):remark #34051: REGISTER ALLOCATION : [__ZNK7Network7getSinkEv] Network.cpp:17

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Network::setSource(Network *, Vertex *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Network::setSource(Network *, Vertex *)) [25] Network.cpp(20,35)


    Report from: Code generation optimizations [cg]

Network.cpp(20,35):remark #34051: REGISTER ALLOCATION : [__ZN7Network9setSourceEP6Vertex] Network.cpp:20

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rsi rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Network::getSource(const Network *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Network::getSource(const Network *) const) [26] Network.cpp(23,36)


    Report from: Code generation optimizations [cg]

Network.cpp(23,36):remark #34051: REGISTER ALLOCATION : [__ZNK7Network9getSourceEv] Network.cpp:23

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Network::totalVertices(const Network *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Network::totalVertices(const Network *) const) [27] Network.cpp(26,38)
  -> INLINE: (27,36) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *) const


    Report from: Code generation optimizations [cg]

Network.cpp(26,38):remark #34051: REGISTER ALLOCATION : [__ZNK7Network13totalVerticesEv] Network.cpp:26

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       0
            Local     :      13
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Network::getVertices(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, const Network *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Network::getVertices(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, const Network *) const) [28] Network.cpp(29,58)
  -> INLINE: (30,9) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1643,17):remark #34026: call to _memcpy implemented as a call to optimized library version
Network.cpp(29,58):remark #34051: REGISTER ALLOCATION : [__ZNK7Network11getVerticesEv] Network.cpp:29

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rsi rdi r13-r15]
        
    Routine temporaries
        Total         :      39
            Global    :      13
            Local     :      26
        Regenerable   :       3
        Spilled       :       3
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       1 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::__vector_base<Vertex *, std::__1::allocator<Vertex *>>::~__vector_base(std::__1::__vector_base<Vertex *, std::__1::allocator<Vertex *>> *)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector(441,1):remark #34051: REGISTER ALLOCATION : [__ZNSt3__113__vector_baseIP6VertexNS_9allocatorIS2_EEED1Ev] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector:441

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rcx rdi]
        
    Routine temporaries
        Total         :      24
            Global    :       9
            Local     :      15
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

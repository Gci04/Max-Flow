Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: createGraph(int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (createGraph(int, int, int)) [2] FordFulkersonBasics.cpp(3,64)
  -> INLINE: (5,14) Network::Network(Network *)
    -> INLINE: Network.h:(7,7) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7,34) Vertex::Vertex(Vertex *, size_t, int, int)
    -> INLINE: Vertex.h:(21,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: Vertex.h:(21,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12,44) Vertex::Vertex(Vertex *, size_t, int, int)
    -> INLINE: Vertex.h:(21,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: Vertex.h:(21,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (15,51) Vertex::Vertex(Vertex *, size_t, int, int)
    -> INLINE: Vertex.h:(21,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: Vertex.h:(21,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (19,45) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
  -> INLINE: (21,34) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *) const
  -> INLINE: (21,34) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *) const
  -> INLINE: (23,26) std::__1::vector<int, std::__1::allocator<int>>::vector(std::__1::vector<int, std::__1::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (23,26) std::__1::vector<int, std::__1::allocator<int>>::~vector(std::__1::vector<int, std::__1::allocator<int>> *)
  -> INLINE: (26,33) std::__1::vector<int, std::__1::allocator<int>>::begin(std::__1::vector<int, std::__1::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (26,47) std::__1::vector<int, std::__1::allocator<int>>::end(std::__1::vector<int, std::__1::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (26,59) std::__1::find<std::__1::vector<int, std::__1::allocator<int>>::iterator, int>(std::__1::vector<int, std::__1::allocator<int>>::iterator, std::__1::vector<int, std::__1::allocator<int>>::iterator, const int &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (26,65) std::__1::operator!=<std::__1::vector<int, std::__1::allocator<int>>::pointer>(const std::__1::__wrap_iter<std::__1::vector<int, std::__1::allocator<int>>::pointer> &, const std::__1::__wrap_iter<std::__1::vector<int, std::__1::allocator<int>>::pointer> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (26,68) std::__1::vector<int, std::__1::allocator<int>>::end(std::__1::vector<int, std::__1::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (34,50) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type)
  -> INLINE: (34,63) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type)
  -> INLINE: (35,18) std::__1::vector<int, std::__1::allocator<int>>::push_back(std::__1::vector<int, std::__1::allocator<int>> *, std::__1::vector<int, std::__1::allocator<int>>::const_reference)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (39,5) std::__1::vector<int, std::__1::allocator<int>>::~vector(std::__1::vector<int, std::__1::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (41,5) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at FordFulkersonBasics.cpp(11,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(12,17) ]
LOOP END

LOOP BEGIN at FordFulkersonBasics.cpp(21,43)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(34,63) ]

   LOOP BEGIN at FordFulkersonBasics.cpp(24,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(34,63) ]

      LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/algorithm(890,20) inlined into FordFulkersonBasics.cpp(26,59)
         remark #15523: loop was not vectorized: loop control variable __first.__first was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1676,17):remark #34026: call to _memcpy implemented as a call to optimized library version
FordFulkersonBasics.cpp(3,64):remark #34051: REGISTER ALLOCATION : [__Z11createGraphiii] FordFulkersonBasics.cpp:3

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     212
            Global    :      62
            Local     :     150
        Regenerable   :      34
        Spilled       :      15
        
    Routine stack
        Variables     :     136 bytes*
            Reads     :      24 [4.53e+01 ~ 3.8%]
            Writes    :      24 [1.89e+01 ~ 1.6%]
        Spills        :      72 bytes*
            Reads     :      24 [2.96e+01 ~ 2.5%]
            Writes    :      19 [2.34e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::__split_buffer<std::__1::vector<int, std::__1::allocator<int>>::value_type, std::__1::vector<int, std::__1::allocator<int>>::allocator_type &>::~__split_buffer(std::__1::__split_buffer<std::__1::vector<int, std::__1::allocator<int>>::value_type, std::__1::vector<int, std::__1::allocator<int>>::allocator_type &> *)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer(340,1):remark #34051: REGISTER ALLOCATION : [__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer:340

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rcx rdi]
        
    Routine temporaries
        Total         :      25
            Global    :      10
            Local     :      15
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::vector<int, std::__1::allocator<int>>::~vector(std::__1::vector<int, std::__1::allocator<int>> *)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector(450,28):remark #34051: REGISTER ALLOCATION : [__ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector:450

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rcx rdi]
        
    Routine temporaries
        Total         :      24
            Global    :       9
            Local     :      15
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: printNetwork(Network *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (printNetwork(Network *)) [15] FordFulkersonBasics.cpp(44,31)
  -> (45,42) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
  -> INLINE: (46,37) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *) const
  -> INLINE: (46,37) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *) const
  -> INLINE: (47,17) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type) const
  -> (47,22) Vertex::print(const Vertex *) const
  -> INLINE: (49,10) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (49,10) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, char)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at FordFulkersonBasics.cpp(46,37)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(47,22) ]
LOOP END

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
FordFulkersonBasics.cpp(44,31):remark #34051: REGISTER ALLOCATION : [__Z12printNetworkP7Network] FordFulkersonBasics.cpp:44

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r12-r15 zmm0]
        
    Routine temporaries
        Total         :     154
            Global    :      38
            Local     :     116
        Regenerable   :      28
        Spilled       :       8
        
    Routine stack
        Variables     :      81 bytes*
            Reads     :      11 [7.86e+00 ~ 10.9%]
            Writes    :      10 [1.29e+00 ~ 1.8%]
        Spills        :      16 bytes*
            Reads     :       3 [6.91e-02 ~ 0.1%]
            Writes    :       2 [2.38e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Vertex::print(const Vertex *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Vertex::print(const Vertex *) const) [16] Vertex.h(44,21)
  -> INLINE: (45,13) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (45,40) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (46,13) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (46,42) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (47,13) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (47,42) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (48,13) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (49,35) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (49,35) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (50,24) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> INLINE: (50,39) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (50,57) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> INLINE: (50,75) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (51,13) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (52,34) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (52,34) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (53,23) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> INLINE: (53,38) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (53,55) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> INLINE: (53,73) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (54,13) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at Vertex.h(49,35)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/ostream(741,14) ]
LOOP END

LOOP BEGIN at Vertex.h(52,34)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/ostream(741,14) ]
LOOP END

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
Vertex.h(44,21):remark #34051: REGISTER ALLOCATION : [__ZNK6Vertex5printEv] Vertex.h:44

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0]
        
    Routine temporaries
        Total         :    1093
            Global    :     282
            Local     :     811
        Regenerable   :     233
        Spilled       :      43
        
    Routine stack
        Variables     :     440 bytes*
            Reads     :      45 [1.26e+01 ~ 3.7%]
            Writes    :      63 [4.96e-01 ~ 0.1%]
        Spills        :     296 bytes*
            Reads     :      69 [4.81e+00 ~ 1.4%]
            Writes    :      57 [6.06e+00 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::__put_character_sequence<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *, size_t)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/ostream(718,1):remark #34051: REGISTER ALLOCATION : [__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/ostream:718

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     116
            Global    :      33
            Local     :      83
        Regenerable   :      20
        Spilled       :      11
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       5 [1.04e+00 ~ 2.4%]
            Writes    :       7 [4.08e-02 ~ 0.1%]
        Spills        :      40 bytes*
            Reads     :      11 [5.76e-01 ~ 1.3%]
            Writes    :       7 [5.10e-01 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: printPath(std::__1::vector<Edge, std::__1::allocator<Edge>> *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (printPath(std::__1::vector<Edge, std::__1::allocator<Edge>> *)) [19] FordFulkersonBasics.cpp(51,35)
  -> INLINE: (52,10) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (52,29) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, char)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (53,30) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (53,30) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (54,21) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (54,48) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (54,65) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (54,90) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (54,105) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (54,120) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (54,134) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (54,152) std::__1::basic_ostream<char, std::__1::char_traits<char>>::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char>> *, std::__1::basic_ostream<char, std::__1::char_traits<char>> &(*)(std::__1::basic_ostream<char, std::__1::char_traits<char>> &))
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (56,10) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, char)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at FordFulkersonBasics.cpp(53,30)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__locale(198,44) ]
LOOP END

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2208,31):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
FordFulkersonBasics.cpp(51,35):remark #34051: REGISTER ALLOCATION : [__Z9printPathNSt3__16vectorI4EdgeNS_9allocatorIS1_EEEE] FordFulkersonBasics.cpp:51

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     744
            Global    :     190
            Local     :     554
        Regenerable   :     155
        Spilled       :      32
        
    Routine stack
        Variables     :     306 bytes*
            Reads     :      31 [8.70e+00 ~ 3.2%]
            Writes    :      45 [2.34e+00 ~ 0.9%]
        Spills        :     208 bytes*
            Reads     :      51 [3.70e+00 ~ 1.4%]
            Writes    :      40 [4.33e+00 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: minCapacity(const std::__1::vector<Edge, std::__1::allocator<Edge>> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (minCapacity(const std::__1::vector<Edge, std::__1::allocator<Edge>> &)) [20] FordFulkersonBasics.cpp(141,46)
  -> INLINE: (142,29) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> INLINE: (143,36) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (143,36) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (144,24) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> INLINE: (145,33) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at FordFulkersonBasics.cpp(143,36)
   remark #15523: loop was not vectorized: loop control variable _i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

    Report from: Code generation optimizations [cg]

FordFulkersonBasics.cpp(141,46):remark #34051: REGISTER ALLOCATION : [__Z11minCapacityRKNSt3__16vectorI4EdgeNS_9allocatorIS1_EEEE] FordFulkersonBasics.cpp:141

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      57
            Global    :      18
            Local     :      39
        Regenerable   :       3
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [9.64e-01 ~ 1.2%]
            Writes    :       3 [9.64e-01 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FordFulkerson(Network *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FordFulkerson(Network *)) [21] FordFulkersonBasics.cpp(180,1)
  -> (186,20) Residual(Network *)
  -> (189,30) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
  -> (189,30) computeAugmentingPath(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const Network *)
  -> INLINE: (190,18) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> (196,13) updateFlow(const std::__1::vector<Edge, std::__1::allocator<Edge>> &, Network *)
  -> INLINE: (201,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (202,5) Network::~Network(Network *)
    -> INLINE: Network.h:(7,7) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at FordFulkersonBasics.cpp(183,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(196,13) ]
LOOP END

    Report from: Code generation optimizations [cg]

FordFulkersonBasics.cpp(180,1):remark #34051: REGISTER ALLOCATION : [__Z13FordFulkersonP7Network] FordFulkersonBasics.cpp:180

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r10 r12-r14]
        
    Routine temporaries
        Total         :      65
            Global    :      16
            Local     :      49
        Regenerable   :       8
        Spilled       :       3
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       5 [4.07e+00 ~ 5.0%]
            Writes    :       2 [4.47e-01 ~ 0.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: updateFlow(const std::__1::vector<Edge, std::__1::allocator<Edge>> &, Network *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (updateFlow(const std::__1::vector<Edge, std::__1::allocator<Edge>> &, Network *)) [22] FordFulkersonBasics.cpp(150,65)
  -> INLINE: (151,26) minCapacity(const std::__1::vector<Edge, std::__1::allocator<Edge>> &)
    -> INLINE: (142,29) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
    -> INLINE: (143,36) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
    -> INLINE: (143,36) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
    -> INLINE: (144,24) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
    -> INLINE: (145,33) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> (152,49) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
  -> INLINE: (153,36) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (153,36) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (154,36) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> INLINE: (155,34) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> INLINE: (157,46) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type) const
  -> INLINE: (157,58) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const std::__1::vector<Edge, std::__1::allocator<Edge>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (157,58) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
  -> INLINE: (158,41) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (158,41) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (159,25) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (161,40) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (167,45) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type) const
  -> (167,57) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
  -> INLINE: (167,57) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const std::__1::vector<Edge, std::__1::allocator<Edge>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (168,40) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (168,40) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (169,24) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (171,39) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (176,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (176,5) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (176,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at FordFulkersonBasics.cpp(143,36) inlined into FordFulkersonBasics.cpp(151,26)
   remark #15523: loop was not vectorized: loop control variable _i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at FordFulkersonBasics.cpp(153,36)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(154,40) ]

   LOOP BEGIN at FordFulkersonBasics.cpp(158,41)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(159,29) ]
   LOOP END

   LOOP BEGIN at FordFulkersonBasics.cpp(168,40)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(169,28) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

FordFulkersonBasics.cpp(173,27):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1643,17):remark #34026: call to _memcpy implemented as a call to optimized library version
FordFulkersonBasics.cpp(163,27):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1643,17):remark #34026: call to _memcpy implemented as a call to optimized library version
FordFulkersonBasics.cpp(150,65):remark #34051: REGISTER ALLOCATION : [__Z10updateFlowRKNSt3__16vectorI4EdgeNS_9allocatorIS1_EEEEP7Network] FordFulkersonBasics.cpp:150

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :     350
            Global    :      77
            Local     :     273
        Regenerable   :      43
        Spilled       :      11
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :      25 [9.38e+01 ~ 7.1%]
            Writes    :      30 [6.36e+01 ~ 4.8%]
        Spills        :      40 bytes*
            Reads     :      13 [2.72e+01 ~ 2.1%]
            Writes    :       7 [5.36e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::__vector_base<Edge, std::__1::allocator<Edge>>::~__vector_base(std::__1::__vector_base<Edge, std::__1::allocator<Edge>> *)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector(441,1):remark #34051: REGISTER ALLOCATION : [__ZNSt3__113__vector_baseI4EdgeNS_9allocatorIS1_EEED1Ev] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector:441

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r10]
        
    Routine temporaries
        Total         :      24
            Global    :       9
            Local     :      15
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: computeAugmentingPath(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const Network *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (computeAugmentingPath(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const Network *)) [24] FordFulkersonBasics.cpp(116,56)
  -> (117,23) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
  -> INLINE: (117,23) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (118,23) std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::map(std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (118,23) std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::~map(std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> *)
  -> INLINE: (120,10) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::push_back(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::const_reference)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (121,13) std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::operator[](std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> *, const std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (122,33) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *) const
  -> INLINE: (122,33) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *) const
  -> INLINE: (123,37) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type)
  -> INLINE: (125,13) std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::~map(std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (125,13) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (125,20) constructPath(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const Network *, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> &)
  -> INLINE: (126,54) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const std::__1::vector<Edge, std::__1::allocator<Edge>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (126,54) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
  -> INLINE: (127,41) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (127,41) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (128,41) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> INLINE: (129,26) std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::count(const std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> *, const std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::key_type &) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (131,25) std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::operator[](std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> *, const std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (131,47) std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::operator[](std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> *, const std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (132,22) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::push_back(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::const_reference)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (135,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (137,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (137,5) std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::~map(std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (137,5) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(1982,21) inlined into FordFulkersonBasics.cpp(121,13)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at FordFulkersonBasics.cpp(122,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(124,33) ]

   LOOP BEGIN at FordFulkersonBasics.cpp(127,41)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(128,45) ]

      LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(2406,5) inlined into FordFulkersonBasics.cpp(129,26)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(1982,21) inlined into FordFulkersonBasics.cpp(131,47)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(278,5) inlined into FordFulkersonBasics.cpp(131,47)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(1982,21) inlined into FordFulkersonBasics.cpp(131,25)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(278,5) inlined into FordFulkersonBasics.cpp(131,25)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1676,17):remark #34026: call to _memcpy implemented as a call to optimized library version
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2105,64):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 8)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2105,64):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 8)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1643,17):remark #34026: call to _memcpy implemented as a call to optimized library version
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2105,64):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 8)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1676,17):remark #34026: call to _memcpy implemented as a call to optimized library version
FordFulkersonBasics.cpp(116,56):remark #34051: REGISTER ALLOCATION : [__Z21computeAugmentingPathPK7Network] FordFulkersonBasics.cpp:116

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15]
        
    Routine temporaries
        Total         :     388
            Global    :     151
            Local     :     237
        Regenerable   :      57
        Spilled       :      11
        
    Routine stack
        Variables     :     112 bytes*
            Reads     :      42 [6.93e+01 ~ 4.5%]
            Writes    :      37 [2.45e+01 ~ 1.6%]
        Spills        :      40 bytes*
            Reads     :      11 [2.14e+01 ~ 1.4%]
            Writes    :       6 [8.61e+00 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::__split_buffer<std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::value_type, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::allocator_type &>::~__split_buffer(std::__1::__split_buffer<std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::value_type, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::allocator_type &> *)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer(340,1):remark #34051: REGISTER ALLOCATION : [__ZNSt3__114__split_bufferIP6VertexRNS_9allocatorIS2_EEED1Ev] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer:340

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rcx rdi]
        
    Routine temporaries
        Total         :      25
            Global    :      10
            Local     :      15
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::__tree<std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__value_type, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__vc, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__allocator_type>::destroy(std::__1::__tree<std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__value_type, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__vc, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__allocator_type> *, std::__1::__tree<std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__value_type, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__vc, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__allocator_type>::__node_pointer)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(1798,1):remark #34051: REGISTER ALLOCATION : [__ZNSt3__16__treeINS_12__value_typeIP6VertexiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree:1798

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rsi rdi r12-r13]
        
    Routine temporaries
        Total         :      17
            Global    :       8
            Local     :       9
        Regenerable   :       0
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::~map(std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> *)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/map(807,28):remark #34051: REGISTER ALLOCATION : [__ZNSt3__13mapIP6VertexiNS_4lessIS2_EENS_9allocatorINS_4pairIKS2_iEEEEED1Ev] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/map:807

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rsi rdi r12-r13]
        
    Routine temporaries
        Total         :      16
            Global    :       8
            Local     :       8
        Regenerable   :       0
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: constructPath(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const Network *, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (constructPath(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const Network *, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> &)) [40] FordFulkersonBasics.cpp(96,76)
  -> (97,18) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
  -> INLINE: (97,18) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (100,53) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
  -> INLINE: (100,53) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const std::__1::vector<Edge, std::__1::allocator<Edge>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (101,28) std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::operator[](std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> *, const std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (102,40) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (102,40) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (103,25) std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::operator[](std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>> *, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::key_type &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (103,33) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> INLINE: (105,30) std::__1::vector<Edge, std::__1::allocator<Edge>>::push_back(std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::const_reference)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (105,47) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> INLINE: (106,40) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](const std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type) const
  -> INLINE: (109,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (110,18) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
  -> INLINE: (110,18) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (111,36) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (112,14) std::__1::vector<Edge, std::__1::allocator<Edge>>::push_back(std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::const_reference)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (112,36) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (113,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at FordFulkersonBasics.cpp(99,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(100,53) ]

   LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(1982,21) inlined into FordFulkersonBasics.cpp(101,28)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(278,5) inlined into FordFulkersonBasics.cpp(101,28)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at FordFulkersonBasics.cpp(102,40)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(103,37) ]

      LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(1982,21) inlined into FordFulkersonBasics.cpp(103,25)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(278,5) inlined into FordFulkersonBasics.cpp(103,25)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at FordFulkersonBasics.cpp(111,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/new(226,10) ]
LOOP END

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1676,17):remark #34026: call to _memcpy implemented as a call to optimized library version
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1676,17):remark #34026: call to _memcpy implemented as a call to optimized library version
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2105,64):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 8)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(2105,64):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 8)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1643,17):remark #34026: call to _memcpy implemented as a call to optimized library version
FordFulkersonBasics.cpp(96,76):remark #34051: REGISTER ALLOCATION : [__Z13constructPathPK7NetworkRNSt3__13mapIP6VertexiNS2_4lessIS5_EENS2_9allocatorINS2_4pairIKS5_iEEEEEE] FordFulkersonBasics.cpp:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :     406
            Global    :     138
            Local     :     268
        Regenerable   :      52
        Spilled       :      11
        
    Routine stack
        Variables     :      88 bytes*
            Reads     :      19 [4.61e+01 ~ 2.7%]
            Writes    :      24 [2.84e+01 ~ 1.7%]
        Spills        :      32 bytes*
            Reads     :      20 [5.56e+01 ~ 3.3%]
            Writes    :       5 [6.90e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::__split_buffer<std::__1::vector<Edge, std::__1::allocator<Edge>>::value_type, std::__1::vector<Edge, std::__1::allocator<Edge>>::allocator_type &>::~__split_buffer(std::__1::__split_buffer<std::__1::vector<Edge, std::__1::allocator<Edge>>::value_type, std::__1::vector<Edge, std::__1::allocator<Edge>>::allocator_type &> *)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer(340,1):remark #34051: REGISTER ALLOCATION : [__ZNSt3__114__split_bufferI4EdgeRNS_9allocatorIS1_EEED1Ev] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer:340

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      25
            Global    :      10
            Local     :      15
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector(450,28):remark #34051: REGISTER ALLOCATION : [__ZNSt3__16vectorI4EdgeNS_9allocatorIS1_EEED1Ev] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector:450

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r10]
        
    Routine temporaries
        Total         :      24
            Global    :       9
            Local     :      15
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::__tree_balance_after_insert<std::__1::__tree_end_node<std::__1::__tree_node_base_types<std::__1::allocator_traits<std::__1::__tree<std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__value_type, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__vc, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__allocator_type>::allocator_type>::void_pointer>::__node_base_pointer>::pointer>(std::__1::__tree_end_node<std::__1::__tree_node_base_types<std::__1::allocator_traits<std::__1::__tree<std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__value_type, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__vc, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__allocator_type>::allocator_type>::void_pointer>::__node_base_pointer>::pointer, std::__1::__tree_end_node<std::__1::__tree_node_base_types<std::__1::allocator_traits<std::__1::__tree<std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__value_type, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__vc, std::__1::map<Vertex *, int, std::__1::less<Vertex *>, std::__1::allocator<std::__1::pair<Vertex *const, int>>>::__allocator_type>::allocator_type>::void_pointer>::__node_base_pointer>::pointer)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(278,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(276,1):remark #34051: REGISTER ALLOCATION : [__ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree:276

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      42
            Global    :      27
            Local     :      15
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Residual(Network *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Residual(Network *)) [51] FordFulkersonBasics.cpp(59,32)
  -> INLINE: (61,14) Network::Network(Network *)
    -> INLINE: Network.h:(7,7) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (62,42) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
  -> INLINE: (63,21) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (63,21) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
  -> INLINE: (64,17) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::resize(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (64,33) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *) const
  -> INLINE: (65,37) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *) const
  -> INLINE: (65,37) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *) const
  -> INLINE: (66,9) Vertex::Vertex(Vertex *)
    -> INLINE: Vertex.h:(19,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: Vertex.h:(19,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (66,20) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type)
  -> INLINE: (67,20) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type)
  -> INLINE: (68,38) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type)
  -> INLINE: (71,32) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type)
  -> INLINE: (72,34) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type)
  -> INLINE: (74,37) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *) const
  -> INLINE: (74,37) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size(const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *) const
  -> INLINE: (75,41) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](const std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type) const
  -> INLINE: (75,46) std::__1::vector<Edge, std::__1::allocator<Edge>>::vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *, const std::__1::vector<Edge, std::__1::allocator<Edge>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (75,46) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
  -> INLINE: (76,41) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (76,41) std::__1::vector<Edge, std::__1::allocator<Edge>>::size(const std::__1::vector<Edge, std::__1::allocator<Edge>> *) const
  -> INLINE: (78,43) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type)
  -> INLINE: (78,52) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (79,41) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::operator[](std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *, std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::size_type)
  -> INLINE: (79,50) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (80,25) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (80,51) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (81,49) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (82,30) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (83,49) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (87,54) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (87,82) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (88,49) std::__1::vector<Edge, std::__1::allocator<Edge>>::operator[](std::__1::vector<Edge, std::__1::allocator<Edge>> *, std::__1::vector<Edge, std::__1::allocator<Edge>>::size_type)
  -> INLINE: (91,5) std::__1::vector<Edge, std::__1::allocator<Edge>>::~vector(std::__1::vector<Edge, std::__1::allocator<Edge>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (93,5) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (93,5) std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector(1031,15) inlined into FordFulkersonBasics.cpp(64,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between *_newVertices._newVertices._newVertices (1783:13) and _newVertices._newVertices._newVertices (979:11)
LOOP END

LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer(206,20) inlined into FordFulkersonBasics.cpp(64,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between *___v.___v (1783:13) and ___v.___v (204:11)
LOOP END


Non-optimizable loops:


LOOP BEGIN at FordFulkersonBasics.cpp(65,37)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(66,9) ]
LOOP END

LOOP BEGIN at FordFulkersonBasics.cpp(74,37)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(75,46) ]

   LOOP BEGIN at FordFulkersonBasics.cpp(76,41)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ FordFulkersonBasics.cpp(78,56) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

FordFulkersonBasics.cpp(61,14):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (1, 0)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1643,17):remark #34026: call to _memcpy implemented as a call to optimized library version
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1676,17):remark #34026: call to _memcpy implemented as a call to optimized library version
FordFulkersonBasics.cpp(59,32):remark #34051: REGISTER ALLOCATION : [__Z8ResidualP7Network] FordFulkersonBasics.cpp:59

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :     326
            Global    :      83
            Local     :     243
        Regenerable   :      47
        Spilled       :       7
        
    Routine stack
        Variables     :     192 bytes*
            Reads     :      45 [3.13e+02 ~ 14.5%]
            Writes    :      32 [2.43e+01 ~ 1.1%]
        Spills        :       8 bytes*
            Reads     :       2 [1.10e+01 ~ 0.5%]
            Writes    :       2 [6.49e+00 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__1::vector<Vertex *, std::__1::allocator<Vertex *>>::~vector(std::__1::vector<Vertex *, std::__1::allocator<Vertex *>> *)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector(450,28):remark #34051: REGISTER ALLOCATION : [__ZNSt3__16vectorIP6VertexNS_9allocatorIS2_EEED1Ev] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector:450

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rcx rdi]
        
    Routine temporaries
        Total         :      24
            Global    :       9
            Local     :      15
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Vertex::Vertex(Vertex *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Vertex::Vertex(Vertex *)) Vertex.h(20,5)

===========================================================================

Begin optimization report for: Vertex::Vertex(Vertex *, size_t, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Vertex::Vertex(Vertex *, size_t, int, int)) Vertex.h(22,5)

===========================================================================

Begin optimization report for: Network::Network(Network *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Network::Network(Network *)) Network.h(7,7)

===========================================================================

Begin optimization report for: Network::~Network(Network *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Network::~Network(Network *)) Network.h(7,7)

===========================================================================

Begin optimization report for: std::__1::endl<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &)

    Report from: Code generation optimizations [cg]

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/ostream(1002,1):remark #34051: REGISTER ALLOCATION : [__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_] /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/ostream:1002

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rsi rdi r14-r15]
        
    Routine temporaries
        Total         :      37
            Global    :      13
            Local     :      24
        Regenerable   :       7
        Spilled       :       2
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       1 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
